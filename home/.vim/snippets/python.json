{
	"context-manager-class": {
		"prefix": "context-manager-class",
		"description": "Context manager (class)",
		"scope": "",
		"body": [
			"from typing import overload",
			"from types import TracebackType",
			"",
			"",
			"class MyContextManager:",
			"    def __enter__(self) -> None:",
			"        pass",
			"",
			"    @overload",
			"    def __exit__(self, exc_type: None, exc_val: None, exc_tb: None) -> None:",
			"        ...",
			"",
			"    @overload",
			"    def __exit__(",
			"        self,",
			"        exc_type: type[BaseException],",
			"        exc_val: BaseException,",
			"        exc_tb: TracebackType,",
			"    ) -> None:",
			"        ...",
			"",
			"    def __exit__(",
			"        self,",
			"        exc_type: type[BaseException] | None,",
			"        exc_val: BaseException | None,",
			"        exc_tb: TracebackType | None,",
			"    ) -> None:",
			"        pass"
		]
	},
	"context-manager-decorator": {
		"prefix": "context-manager-decorator",
		"description": "Context manager (decorator)",
		"scope": "",
		"body": [
			"from contextlib import contextmanager",
			"from collections.abc import Generator",
			"",
			"",
			"@contextmanager",
			"def my_context_manager() -> Generator[int, None, None]:",
			"    yield 5",
			""
		]
	},
	"class": {
		"prefix": "class",
		"description": "Code snippet for a class definition.",
		"scope": "",
		"body": [
			"class ${1:ClassName}(${2:object}):",
			"\t\"\"\"${3:docstring for $1.}\"\"\"",
			"\tdef __init__(self, ${4:arg}):",
			"\t\t${5:super($1, self).__init__()}",
			"\t\tself.arg = arg",
			"\t\t$0"
		]
	},
	"def": {
		"prefix": "def",
		"description": "Code snippet for a class method definition.",
		"scope": "",
		"body": [
			"def ${1:mname}(self, ${2:arg}) -> ${3:return_type}:",
			"\t${4:pass}$0"
		]
	},
"property": {
	"prefix": "property",
	"description": "New property: get and set via decorator",
	"scope": "",
	"body": [
		"@property",
		"def ${1:foo}(self):",
		"    \"\"\"${2:The $1 property.}\"\"\"",
		"    ${3:return self._$1}",
		"@${4:$1}.setter",
		"def ${5:$1}(self, value):",
		"    ${6:self._$1} = value"
	]
},
"try": {
	"prefix": "try",
	"description": "Code Snippet for a try/except/finally with else statement.",
	"scope": "",
	"body": [
		"try:",
		"\t${1:pass}",
		"except${2: ${3:Exception} as ${4:e}}:",
		"\t${5:raise}",
		"else:",
		"\t${6:pass}",
		"finally:",
		"\t${7:pass}$0"
	]
},
"ifmain": {
	"prefix": "ifmain",
	"description": "Create implicitly all the code at the top level using the __name__ special variable.",
	"scope": "",
	"body": [
		"if __name__ == \"__main__\":",
		"\t${1:main()}$0"
	]
}
}
