[user]
  email = hello@Fresh2.dev
  name = Donald Mellenbruch
[credential "https://github.com"]
	helper = 
	helper = !/Users/donald/.local/bin/gh auth git-credential
[credential "https://gist.github.com"]
	helper = 
	helper = !/Users/donald/.local/bin/gh auth git-credential
[init]
  defaultBranch = main
  ; templatedir = /home/donald/.git_template
[core]
    autocrlf = false
    fileMode = false
    ; hooksPath = /home/donald/.githooks
    editor = vim
    pager = delta
[interactive]
    diffFilter = delta --color-only --features=interactive
[delta]
    features = decorations
    light = false
    navigate = true
    line-numbers = true
    side-by-side = false
[color]
    ui = true
    pager = true
    ; diff = always
    ; status = always
    ; branch = always
    ; interactive = always
[privacy]
    pattern = hms
[fetch]
    prune = true
[pull]
    rebase = true
[rebase]
    autoStash = true
    updateRefs = true
; [branch "main"]
;     mergeoptions = --no-ff
[push]
    autoSetupRemote = true
[merge]
    tool = diffview
    conflictStyle = zdiff3
    autoStash = true
[mergetool]
    prompt = false
    keepBackup = false
[mergetool "diffview"]
  cmd = nvim -c "DiffviewOpen" "$MERGE"
[diff]
    tool = nvimdiff
[difftool]
    prompt = false
[difftool "nvimdiff"]
    ; TODO: Why do I have to explicitly call `diffthis`?
    cmd = nvim -d "$LOCAL" "$REMOTE" -c 'windo diffthis'
    colorMoved = default
    algorithm = histogram
[alias]
    is-repo = !git status --porcelain >/dev/null 2>&1

    pwd = !(git is-repo && git rev-parse --show-toplevel) || pwd

    is-clean = "!f() { \
                git is-repo && test -z \"$(git status --porcelain)\"; \
            }; f"

    fd = !gfold --display-mode classic

    authors = shortlog --summary --numbered --email --all

    ref = rev-parse --short=8 HEAD
    # Init commit sha
    ref0 = "!f() { \
                git rev-list --all --max-parents=0 HEAD | tail -n1 | cut -c 1-7; \
            }; f"

    # Rewrite author emails according to .gitmailmap.
    # Requires `git-filter-repo`
    mailmap = !([ -f "$HOME/.gitmailmap" ] || echo 'New Name <new@mail.com> <old@mail.com>' > "$HOME/.gitmailmap") && ${EDITOR:-vim} "$HOME/.gitmailmap" && git filter-repo --force --mailmap "$HOME/.gitmailmap"

    ##################################################
    # Revert/undo/nuke unstaged and untracked.
    ##################################################
    nuke = !git reset --hard && git restore .

    ##################################################
    # Branch ops
    ##################################################
    b = branch --show-current
    ba = branch
    bd = branch --delete

    co = checkout
    cob = switch --create

    ##################################################
    # Commit ops
    ##################################################
    cc = commit
    cvc = commit --verbose
    ca = commit --amend
    cva = command --verbose --amend
    ce = command --amend --no-edit
    cf = fixup
    cs = squash
    cr = revert
    crc = revert --no-edit
    crn = revert --no-commit
    cm = merge --commit

    ##################################################
    # Stash ops
    ##################################################
    czz = stash push
    czw = stash push --keep-index
    czs = stash push --staged
    cza = stash apply --index
    czp = stash pop --index
    czl = stash list
    czd = stash drop
    czx = stash clear

    ##################################################
    # Push ops
    ##################################################
    p = push
    po = push origin -u
    push-everywhere = "!f() { \
                git remote | while read -r remote; do \
                    echo -n \"${remote}: \" && git push $remote $@; \
                done; \
            }; f"
    pe = push-everywhere

    ##################################################
    # Rebase ops
    ##################################################
    ri = rebase --interactive
    rf = rebase --autosquash
    rr = rebase --continue
    rs = rebase --skip
    ra = rebase --abort
    re = rebase --edit-todo

    ##################################################
    # Fetch ops
    ##################################################
    f = fetch
    fa = fetch --all --prune

    sync = !git fetch --all --prune && (git pull origin $(git b) &>/dev/null || true) && git fetch origin main:main && git rebase main

    ##################################################
    # Merge ops
    ##################################################
    m = merge
    mf = merge --ff-only --no-commit --stat
    ms = merge --squash --no-commit --stat
    cmf = merge --ff-only --commit --stat
    cms = merge --squash --commit --stat

    ##################################################
    # Log / Graph ops
    ##################################################
    g = log --graph --decorate --oneline
    ga = log --graph --decorate --oneline --all
    gl = log --graph --decorate --oneline --all --decorate-refs-exclude=refs/remotes
    gla = log --graph --decorate --oneline --all --decorate-refs-exclude=refs/remotes --all
    gac = log --graph --decorate --oneline --all --pretty=oneline --no-abbrev
    l = log --graph --decorate --abbrev-commit --format=format:'%C(bold yellow)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
    la = log --graph --decorate --abbrev-commit --format=format:'%C(bold yellow)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'all

    ##################################################
    # Tag ops
    ##################################################
    t = tag
    # List tags, sorted by version.
    tv = tag --list --sort=-v:refname
    # List tags, verbose.
    tvv = tag --list --format='%(refname:lstrip=2) -> %(objectname:short) - %(contents:lines=1)' --sort=-creatordate;

    # List latest tag preceeding HEAD.
    tl = !git tag --sort=committerdate | tail -n1

    # Remove a tag from local and remotes.
    td = "!f() { \
                git remote | while read -r remote; do \
                    git push --delete $remote ${1} || true; \
                done \
                && git tag --delete ${1:?}; \
            }; f"


