#!/usr/bin/env python3
from pathlib import Path


import myke
from sh import brew, uv, go, eget, cargo, python
from typing import Optional, Annotated
import os
import sys

brew = brew.bake(_fg=True)
eget = eget.bake(_fg=True)
go = go.bake(_fg=True)
cargo = cargo.bake(_fg=True)
uv = uv.bake(_fg=True)
python = python.bake(_fg=True)


@myke.task(parents=("scripts"))
def rename_dirty_files(
    *args: str, dry_run: Annotated[bool, myke.arg("--dry-run/--no-dry-run")] = True
):
    from urllib.parse import unquote

    if not args:
        if not sys.stdin.isatty():
            args = sys.stdin  # type: ignore
        else:
            args = tuple(str(x) for x in Path.cwd().glob("*.*") if x.is_file())

    for x in args:
        path: Path = Path(x.rstrip(os.linesep))
        new_path: Path = path.parent / unquote(path.name).strip().strip("\"'")
        if not path.name == new_path.name:
            if new_path.exists():
                raise FileExistsError(new_path)

            print(path.relative_to(Path.cwd()))
            print("-->", new_path.relative_to(Path.cwd()))

            if not dry_run:
                path.rename(new_path)


@myke.task(parents=("apps"), name="upgrade")
def apps_upgrade(
    include_brew: Annotated[Optional[bool], myke.arg("--brew")] = None,
    include_rust: Annotated[Optional[bool], myke.arg("--rust")] = None,
    include_python: Annotated[Optional[bool], myke.arg("--python")] = None,
    include_go: Annotated[Optional[bool], myke.arg("--go")] = None,
    include_eget: Annotated[Optional[bool], myke.arg("--eget")] = None,
):
    if not any(
        [
            include_brew,
            include_python,
            include_go,
            include_go,
            include_rust,
            include_eget,
        ]
    ):
        include_brew = include_rust = include_python = include_go = True
        include_eget = False

    if include_brew:
        brew("bundle", "install", "--upgrade", "--file", "~/.Brewfile")

    if include_rust:
        cargo_install = cargo.bake("binstall", "-y")
        cargo("install", "cargo-binstall")
        cargo("install", "cargo-cache")
        cargo_install("ripgrep@14.1.1")
        cargo_install("bat@0.25.0")
        cargo_install("pastel@0.10.0")
        cargo_install("git-delta@0.18.2")
        cargo_install("typos-cli@1.29.5")
        cargo_install("atuin@18.4.0")
        cargo_install("bottom@0.10.2")
        cargo_install("gping@1.19.0")
        cargo_install("du-dust@1.1.1")
        cargo_install("inlyne@0.5.0")
        cargo_install("git-cliff@2.8.0")
        cargo_install("zoxide@0.9.6")
        cargo_install("eza@0.20.19")
        cargo_install("starship@1.22.1")
        cargo_install("yazi-fm@0.4.2", "yazi-cli@0.4.2")
        cargo_install("viddy@1.3.0")
        cargo_install("zellij@0.41.2")
        cargo_install("tokei@13.0.0-alpha.8")
        cargo_install("lychee@0.18.0")
        cargo_install("alacritty@0.15.0")
        cargo_install("neovide@0.14.0")
        cargo_install("tealdeer@1.7.1")
        cargo_install("koji@3.2.0")
        cargo_install("sqruff@0.24.3")
        cargo_install("git-graph@0.6.0")
        cargo_install("gfold@4.6.0")

        # cargo_install(
        #     "--git",
        #     "https://github.com/feel-ix-343/markdown-oxide",
        #     "markdown-oxide@0.25.0",
        # )

    if include_go:
        go_install = go.bake("install")
        go_install("github.com/zyedidia/eget@v1.3.4")
        go_install("golang.org/x/tools/gopls@latest")
        go_install("golang.org/x/tools/cmd/goimports@latest")
        go_install("mvdan.cc/gofumpt@latest")
        go_install("mvdan.cc/sh/v3/cmd/shfmt@latest")
        go_install("github.com/jesseduffield/lazygit@v0.45.2")
        go_install("honnef.co/go/tools/cmd/staticcheck@latest")
        go_install("github.com/junegunn/fzf@v0.59.0")
        go_install("github.com/danielmiessler/fabric@v1.4.131")
        go_install("github.com/charmbracelet/gum@v0.15.2")
        go_install("github.com/charmbracelet/glow@latest")
        go_install("github.com/hairyhenderson/gomplate/v4/cmd/gomplate@v4.3.0")
        go_install("github.com/helmwave/helmwave/cmd/helmwave@v0.41.8")
        go_install("github.com/derailed/k9s@v0.32.7")
        go_install("github.com/hetznercloud/cli/cmd/hcloud@v1.50.0")
        go_install("github.com/kubernetes/kompose@v1.32.0")
        go_install("github.com/mikefarah/yq/v4@v4.45.1")
        go_install(
            "github.com/charmbracelet/mods@9ad048aa5517843894d91bb8571e6c41d7ab774a"
        )
        go_install(
            "-tags",
            "extended",
            "github.com/gohugoio/hugo@v0.142.0",
            _env={**os.environ, "CGO_ENABLED": "1"},
        )
        # https://golangci-lint.run
        # go_install("github.com/golangci/golangci-lint/cmd/golangci-lint@v1.63.4")

    if include_python:
        uv_install = uv.bake("tool", "install", "--upgrade", "--force")
        uv_install("--python=3.12", "aider-chat")
        uv_install("asciinema")
        uv_install("b2")
        uv_install("copier")
        # uv_install("grip")
        uv_install("git-filter-repo")
        uv_install("jupyterlab")
        uv_install("pyinfra")
        uv_install("pre-commit")
        uv_install("yamllint")
        uv_install("poetry")
        uv_install("basedpyright")
        uv_install("ruff")
        uv_install("--with", "tox-uv", "tox")
        uv_install("docsig")
        uv_install("yt-dlp[default]")
        uv_install("neovim-remote")
        uv_install("mac-cleanup")
        uv_install(
            "--with",
            "mdformat-mkdocs",
            "--with",
            "mdformat-tables",
            "--with",
            "mdformat-admon",
            "--with",
            "mdformat-deflist",
            "--with",
            "mdformat-footnote",
            "--with",
            "mdformat-frontmatter",
            "--with",
            "mdformat-ruff",
            "--with",
            "mdformat-shfmt",
            "mdformat",
        )
        uv_install(
            "--with",
            "mkdocs-material",
            "--with",
            "mkdocs-jupyter",
            "--with",
            "mkdocstrings[python]",
            "--with",
            "black",
            "--with",
            "mkdocs-include-dir-to-nav",
            "mkdocs",
        )
        # pipx upgrade --install figbox
        # pipx upgrade --install hostbutter
        # pipx upgrade --install myke
        # pipx upgrade --install ripgrep-ext

    if include_eget:
        # TODO: install/upgrade eget apps
        raise NotImplementedError


@myke.task(parents=("apps"), name="cache-clear")
def cache_clear(
    include_brew: Annotated[Optional[bool], myke.arg("--brew")] = None,
    include_rust: Annotated[Optional[bool], myke.arg("--rust")] = None,
    include_python: Annotated[Optional[bool], myke.arg("--python")] = None,
    include_go: Annotated[Optional[bool], myke.arg("--go")] = None,
):
    if not any([include_brew, include_python, include_go, include_go, include_rust]):
        include_brew = include_python = include_go = include_eget = True

    if include_brew:
        brew("cleanup")

    if include_rust:
        cargo("cargo", "cache", "--autoclean-expensive")

    if include_go:
        go("clean", "--cache")

    if include_python:
        uv("cache", "clean")
        python("-m", "pip", "cache", "purge")


#  @myke.task(
#      parents=("os"), env_update={"EGET_BIN": str(Path.home() / ".local" / "bin")}
#  )
#  def install_eget_apps():
#      return [
#          "eget 'neovide/neovide' --tag='0.12.2'",
#          "eget 'BurntSushi/ripgrep' --tag='14.1.0'",
#          "eget 'junegunn/fzf' --tag='0.48.1'",
#          "eget 'sharkdp/fd' --tag='v9.0.0'",
#          "eget 'sharkdp/bat' --tag='v0.24.0'",
#          "eget 'sharkdp/pastel' --tag='0.9.0'",
#          "eget 'dandavison/delta' --tag='0.16.5'",
#          "eget 'eza-community/eza' --tag='v0.17.2'",
#          "eget 'charmbracelet/gum' --tag='v0.13.0'",
#          "eget 'charmbracelet/glow' --tag='v1.5.1'",
#          "eget 'charmbracelet/mods' --tag='v1.1.0'",
#          "eget 'artempyanykh/marksman' --tag='2023-12-09'",
#          "eget 'sxyazi/yazi' --tag='v0.2.1'",
#          "eget 'ajeetdsouza/zoxide' --tag='0.9.2'",
#          "eget 'starship/starship' --tag='v1.17.1'",
#          "eget 'neovim/neovim' --tag='0.9.5'",
#          "eget 'gohugoio/hugo' --tag='v0.121.2'",
#          "eget 'harness/drone-cli' --tag='v1.7.0'",
#          "eget 'direnv/direnv' --tag='v2.33.0'"
#          "eget 'openfaas/faas-cli' --tag='0.16.21'",
#          "eget 'orhun/git-cliff' --tag='v1.4.0'",
#          "eget 'moncho/dry' --tag='v0.11.2'",
#          "eget 'sachaos/viddy' --tag='v0.4.0'",
#          "eget 'nektos/act' --tag='v0.2.59'",
#          "eget 'helmwave/helmwave' --asset='.tar.gz' --tag='v0.35.2'",
#          "eget 'arttor/helmify' --tag='v0.4.10'",
#          "eget 'hadolint/hadolint' --tag='v2.12.0'",
#          "eget 'devspace-sh/devspace' --tag='v6.3.12'",
#          "eget 'alexellis/arkade' --tag='0.11.4'",
#          "eget 'kubernetes/kompose' --tag='v1.32.0' --asset='.tar.gz' --to=$HOME/.local/bin/kompose",
#          "eget 'ahmetb/kubectx' --tag='v0.9.5' --asset=kubectx --to=$HOME/.local/bin/kubectl-ctx",
#          "eget 'ahmetb/kubectx' --tag='v0.9.5' --asset=kubens --to=$HOME/.local/bin/kubectl-ns",
#          "eget 'keisku/kubectl-explore' --tag='v0.7.2' --to=$HOME/.local/bin/kubectl-explore",
#          "eget 'corneliusweig/ketall' --tag='v1.3.8' --asset='ketall' --file='ketall*' --to=$HOME/.local/bin/kubectl-get_all",
#          "eget 'vladimirvivien/ktop' --tag='v0.3.5' --asset=kubectl-ktop --file=kubectl-ktop --to=$HOME/.local/bin/kubectl-ktop",
#          "eget 'iximiuz/kexp' --tag='v0.0.5' --to=$HOME/.local/bin/kubectl-kexp",
#          "eget 'derailed/k9s' --tag='v0.31.7' --asset='.tar.gz' --asset='^sbom' --to=$HOME/.local/bin/kubectl-ui",
#          "eget 'kubescape/kubescape' --tag='v3.0.3' --asset='.tar.gz' --to=$HOME/.local/bin/kubectl-kubescape",
#          "eget 'derailed/popeye' --tag='v0.11.2' --to=$HOME/.local/bin/kubectl-popeye",
#          "eget 'tohjustin/kube-lineage' --tag='v0.5.0' --to=$HOME/.local/bin/kubectl-get_lineage",
#          "eget 'robscott/kube-capacity' --tag='v0.7.4' --to=$HOME/.local/bin/kubectl-capacity",
#          "eget 'zegl/kube-score' --tag='v1.17.0' --to=$HOME/.local/bin/kubectl-score",
#          "eget 'boz/kail' --tag='v0.17.4' --asset=v3 --to=$HOME/.local/bin/kubectl-tail",
#          "eget 'ahmetb/kubectl-tree' --tag='v0.4.3' --to=$HOME/.local/bin/kubectl-tree",
#          "eget 'kubepug/kubepug' --tag='v1.7.1' --asset='.tar.gz' --asset='^.tar.gz.' --to=$HOME/.local/bin/kubectl-deprecations",
#          "eget 'komodorio/helm-dashboard' --tag='v1.3.3' --to=$HOME/.local/bin/helm-dashboard",
#      ]


#  @myke.task(parents=("os"))
#  def install_distrobox():
#      return [
#          "[ -d /tmp/distrobox ] || git clone --depth=1 https://www.github.com/89luca89/distrobox.git /tmp/distrobox",
#          "/tmp/distrobox/install --prefix ~/.local",
#          "~/.local/bin/distrobox assemble create --file ~/.config/distrobox/distrobox.ini",
#      ]


@myke.task(parents=("py"), name="fix")
def py_fix(*args: str):
    import json
    import subprocess
    import sys
    import os
    from collections import defaultdict
    from dataclasses import dataclass
    from pathlib import Path
    from shutil import which
    from typing import Any, Dict, List, Optional, Sequence, Tuple

    RUFF_EXE: List[str] = (
        [ruff] if (ruff := which("ruff")) else [sys.executable, "-m", "ruff"]
    )
    DELTA_EXE: Optional[str] = which("delta")

    def run_ruff(args: Sequence[str], **kwargs: Any) -> subprocess.CalledProcessError:
        return subprocess.run([*RUFF_EXE, *args], check=True, **kwargs)

    def input_from_options(options: Dict[str, str]):
        while True:
            print("\nProvide the key corresponding to the desired option:\n")
            for key, option in options.items():
                print(f"[{key}] {option}")
            choice: str = input("\nChoice: ")
            if options.get(choice):
                return choice
            print("Invalid choice.")

    @dataclass
    class RuffViolation:
        code: str
        count: int
        fixable: bool
        name: str
        summary: Optional[str] = None
        explanation: Optional[str] = None

        def __post_init__(self):
            rule_details: Dict[str, Any] = json.loads(
                run_ruff(
                    ["rule", "--output-format=json", self.code],
                    capture_output=True,
                ).stdout,
            )
            self.summary = rule_details.get("summary")
            self.explanation = rule_details.get("explanation")

        @classmethod
        def from_dict(cls, kv: Dict[str, Any], /):
            return cls(**{k: v for k, v in kv.items() if k in cls.__dataclass_fields__})

    def get_fixable_violations(args: Sequence[str]) -> Tuple[RuffViolation, ...]:
        p = run_ruff(
            [
                "check",
                *args,
                "--fixable=ALL",
                "--statistics",
                "--output-format=json",
                "--quiet",
                "--no-fix",
                "--exit-zero",
            ],
            capture_output=True,
        )

        return tuple(
            sorted(
                (
                    RuffViolation.from_dict(rule)
                    for rule in json.loads(p.stdout)
                    if rule.get("fixable")
                ),
                key=lambda x: x.code,
            ),
        )

    def ruff_review(args):
        first_pass: bool = True
        while True:
            fixable_violations: Tuple[RuffViolation, ...] = get_fixable_violations(args)
            if not fixable_violations:
                print("No fixable violations remain.")
                return

            if not first_pass:
                print("Fixable violations remain.")
                options: Dict[str, str] = {
                    "": "Run Again.",
                    "q": "Quit.",
                }

                selection = input_from_options(options)

                if selection == "q":
                    return

            first_pass = False

            for i, rule in enumerate(fixable_violations):
                rule_violations_by_file: Dict[str, int] = defaultdict(int)

                for x in json.loads(
                    run_ruff(
                        [
                            "check",
                            f"--select={rule.code}",
                            f"--fixable={rule.code}",
                            "--quiet",
                            "--no-fix",
                            "--exit-zero",
                            "--output-format=json",
                        ],
                        capture_output=True,
                    ).stdout,
                ):
                    if f := x.get("filename"):
                        rule_violations_by_file[
                            str(Path(f).relative_to(Path.cwd()))
                        ] += 1

                while rule_violations_by_file:
                    while True:
                        file = next(iter(rule_violations_by_file))
                        n_violations: int = rule_violations_by_file[file]
                        p = run_ruff(
                            [
                                "check",
                                f"--select={rule.code}",
                                f"--fixable={rule.code}",
                                "--quiet",
                                "--diff",
                                "--no-fix",
                                "--exit-zero",
                                file,
                            ],
                            capture_output=bool(DELTA_EXE),
                        )
                        if DELTA_EXE:
                            subprocess.run(
                                [DELTA_EXE, "--paging=never"],
                                check=False,
                                input=p.stdout,
                            )

                        file_diff = run_ruff(
                            [
                                "check",
                                f"--select={rule.code}",
                                f"--fixable={rule.code}",
                                "--quiet",
                                "--diff",
                                "--no-fix",
                                "--exit-zero",
                                file,
                            ],
                            capture_output=True,
                        ).stdout

                        print(
                            f"{sum(rule_violations_by_file.values())} total violation(s) of rule [{i + 1}/{len(fixable_violations)}]: [{rule.code}] {rule.summary}"
                        )
                        print()
                        print(f"{n_violations} reported violation(s) in file: {file}")
                        if len(rule_violations_by_file) > 1:
                            print()
                            print(
                                f"This rule is violated in {len(rule_violations_by_file) - 1} other file(s)."
                            )

                        options: Dict[str, str] = {
                            "h": f"View full help for rule {rule.code}.",
                            "f": f"Fix {rule.code} violations in this file.",
                            "F": f"Fix {rule.code} violations in all remaining files.",
                            "i": f"Ignore {rule.code} violations in this file.",
                            "I": f"Ignore {rule.code} violations in all remaining files.",
                            "v": "View proposed edits to this file.",
                            "r": "Refresh.",
                            "s": "Skip to next.",
                            "q": "Quit.",
                        }

                        selection = input_from_options(options)

                        if selection == "q":
                            return

                        if selection == "r":
                            continue

                        if selection == "h":
                            subprocess.run(
                                [
                                    os.getenv("EDITOR", "vim"),
                                    "-",
                                    "-c",
                                    "set ft=markdown",
                                ],
                                check=False,
                                input=run_ruff(
                                    ["rule", rule.code],
                                    capture_output=True,
                                ).stdout,
                            )

                            continue

                        if selection == "v":
                            if DELTA_EXE:
                                subprocess.run(
                                    [DELTA_EXE, "--paging=always"],
                                    check=False,
                                    input=file_diff,
                                )
                            continue

                        if selection == "s":
                            pass
                        elif selection == "f":
                            run_ruff(
                                [
                                    "check",
                                    f"--select={rule.code}",
                                    f"--fixable={rule.code}",
                                    "--fix",
                                    file,
                                ],
                            )
                            rule_violations_by_file.pop(file)
                        elif selection == "F":
                            run_ruff(
                                [
                                    "check",
                                    f"--select={rule.code}",
                                    f"--fixable={rule.code}",
                                    "--fix",
                                    *list(rule_violations_by_file),
                                ],
                            )
                            rule_violations_by_file.clear()
                        elif selection == "i":
                            run_ruff(
                                [
                                    "check",
                                    f"--select={rule.code}",
                                    f"--fixable={rule.code}",
                                    "--add-noqa",
                                    file,
                                ],
                            )
                        elif selection == "I":
                            run_ruff(
                                [
                                    "check",
                                    f"--select={rule.code}",
                                    f"--fixable={rule.code}",
                                    "--add-noqa",
                                    *list(rule_violations_by_file),
                                ],
                            )
                            rule_violations_by_file.clear()

                        rule_violations_by_file.pop(file, None)
                        break

            print("\nFin!\n")

    ruff_review(args)


if __name__ == "__main__":
    myke.main(__file__)
