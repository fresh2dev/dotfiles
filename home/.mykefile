#!/usr/bin/env python3


import myke

#  @myke.shell_task(parents=("os"))
#  def install_pyenv():
#      return [
#          'export PYENV_ROOT="${PYENV_ROOT:-$HOME/.pyenv}"',
#          '[ -d "$PYENV_ROOT" ] || git clone --depth=1 https://github.com/pyenv/pyenv.git "${PYENV_ROOT}"'
#          '"$PYENV_ROOT/bin/pyenv" install --skip-existing 3.7 3.8 3.9 3.10 3.11 3.12',
#      ]


@myke.shell_task(parents=("os"))
def upgrade():
    return [
        "brew bundle --file ~/.Brewfile",
        "uv tool install --upgrade aider-chat",
        # General Tools
        "uv tool install --upgrade --force asciinema",
        "uv tool install --upgrade --force b2",
        "uv tool install --upgrade --force copier",
        "uv tool install --upgrade --force grip",
        # pipx upgrade --install figbox
        "uv tool install --upgrade --force git-filter-repo",
        # pipx upgrade --install gnome-extensions-cli
        # pipx upgrade --install hostbutter
        "uv tool install --upgrade --force jupyterlab",
        "uv tool install --upgrade --force --with mkdocs-material --with mkdocs-jupyter --with 'mkdocstrings[python]' --with black --with mkdocs-include-dir-to-nav mkdocs",
        "uv tool install --upgrade --force --with mdformat-mkdocs --with mdformat-ruff --with mdformat-shfmt mdformat",
        "uv tool install --upgrade --force pyinfra",
        "uv tool install --upgrade --force pre-commit",
        # pipx upgrade --install myke
        # uv tool install --upgrade yamlfix
        "uv tool install --upgrade --force yamllint",
        # Python Dev Tools
        "uv tool install --upgrade --force basedpyright",
        "uv tool install --upgrade --force ruff",
        "uv tool install --with tox-uv --upgrade --force tox",
        "uv tool install --upgrade --force docsig",
        # "pipx install -f --include-deps 'ansible==9.*'",
        # "pipx install -f --include-deps 'jupyterlab'",
    ]


#  @myke.shell_task(
#      parents=("os"), env_update={"EGET_BIN": str(Path.home() / ".local" / "bin")}
#  )
#  def install_eget_apps():
#      return [
#          "eget 'neovide/neovide' --tag='0.12.2'",
#          "eget 'BurntSushi/ripgrep' --tag='14.1.0'",
#          "eget 'junegunn/fzf' --tag='0.48.1'",
#          "eget 'sharkdp/fd' --tag='v9.0.0'",
#          "eget 'sharkdp/bat' --tag='v0.24.0'",
#          "eget 'sharkdp/pastel' --tag='0.9.0'",
#          "eget 'dandavison/delta' --tag='0.16.5'",
#          "eget 'eza-community/eza' --tag='v0.17.2'",
#          "eget 'charmbracelet/gum' --tag='v0.13.0'",
#          "eget 'charmbracelet/glow' --tag='v1.5.1'",
#          "eget 'charmbracelet/mods' --tag='v1.1.0'",
#          "eget 'artempyanykh/marksman' --tag='2023-12-09'",
#          "eget 'sxyazi/yazi' --tag='v0.2.1'",
#          "eget 'ajeetdsouza/zoxide' --tag='0.9.2'",
#          "eget 'starship/starship' --tag='v1.17.1'",
#          "eget 'neovim/neovim' --tag='0.9.5'",
#          "eget 'gohugoio/hugo' --tag='v0.121.2'",
#          "eget 'harness/drone-cli' --tag='v1.7.0'",
#          "eget 'direnv/direnv' --tag='v2.33.0'"
#          "eget 'openfaas/faas-cli' --tag='0.16.21'",
#          "eget 'orhun/git-cliff' --tag='v1.4.0'",
#          "eget 'moncho/dry' --tag='v0.11.2'",
#          "eget 'sachaos/viddy' --tag='v0.4.0'",
#          "eget 'nektos/act' --tag='v0.2.59'",
#          "eget 'helmwave/helmwave' --asset='.tar.gz' --tag='v0.35.2'",
#          "eget 'arttor/helmify' --tag='v0.4.10'",
#          "eget 'hadolint/hadolint' --tag='v2.12.0'",
#          "eget 'devspace-sh/devspace' --tag='v6.3.12'",
#          "eget 'alexellis/arkade' --tag='0.11.4'",
#          "eget 'kubernetes/kompose' --tag='v1.32.0' --asset='.tar.gz' --to=$HOME/.local/bin/kompose",
#          "eget 'ahmetb/kubectx' --tag='v0.9.5' --asset=kubectx --to=$HOME/.local/bin/kubectl-ctx",
#          "eget 'ahmetb/kubectx' --tag='v0.9.5' --asset=kubens --to=$HOME/.local/bin/kubectl-ns",
#          "eget 'keisku/kubectl-explore' --tag='v0.7.2' --to=$HOME/.local/bin/kubectl-explore",
#          "eget 'corneliusweig/ketall' --tag='v1.3.8' --asset='ketall' --file='ketall*' --to=$HOME/.local/bin/kubectl-get_all",
#          "eget 'vladimirvivien/ktop' --tag='v0.3.5' --asset=kubectl-ktop --file=kubectl-ktop --to=$HOME/.local/bin/kubectl-ktop",
#          "eget 'iximiuz/kexp' --tag='v0.0.5' --to=$HOME/.local/bin/kubectl-kexp",
#          "eget 'derailed/k9s' --tag='v0.31.7' --asset='.tar.gz' --asset='^sbom' --to=$HOME/.local/bin/kubectl-ui",
#          "eget 'kubescape/kubescape' --tag='v3.0.3' --asset='.tar.gz' --to=$HOME/.local/bin/kubectl-kubescape",
#          "eget 'derailed/popeye' --tag='v0.11.2' --to=$HOME/.local/bin/kubectl-popeye",
#          "eget 'tohjustin/kube-lineage' --tag='v0.5.0' --to=$HOME/.local/bin/kubectl-get_lineage",
#          "eget 'robscott/kube-capacity' --tag='v0.7.4' --to=$HOME/.local/bin/kubectl-capacity",
#          "eget 'zegl/kube-score' --tag='v1.17.0' --to=$HOME/.local/bin/kubectl-score",
#          "eget 'boz/kail' --tag='v0.17.4' --asset=v3 --to=$HOME/.local/bin/kubectl-tail",
#          "eget 'ahmetb/kubectl-tree' --tag='v0.4.3' --to=$HOME/.local/bin/kubectl-tree",
#          "eget 'kubepug/kubepug' --tag='v1.7.1' --asset='.tar.gz' --asset='^.tar.gz.' --to=$HOME/.local/bin/kubectl-deprecations",
#          "eget 'komodorio/helm-dashboard' --tag='v1.3.3' --to=$HOME/.local/bin/helm-dashboard",
#      ]


#  @myke.shell_task(parents=("os"))
#  def install_distrobox():
#      return [
#          "[ -d /tmp/distrobox ] || git clone --depth=1 https://www.github.com/89luca89/distrobox.git /tmp/distrobox",
#          "/tmp/distrobox/install --prefix ~/.local",
#          "~/.local/bin/distrobox assemble create --file ~/.config/distrobox/distrobox.ini",
#      ]


#  @myke.shell_task(parents=("os"))
#  def update():
#      install_pyenv()
#      return [
#          "devbox global update",
#      ]


#  @myke.shell_task(parents=("os"))
#  def hello(name):
#      return [
#          f"echo Hello {name}",
#      ]


@myke.task(name="fix", parents=("py"))
def py_fix(*args: str):
    import json
    import subprocess
    import sys
    import os
    from collections import defaultdict
    from dataclasses import dataclass
    from pathlib import Path
    from shutil import which
    from typing import Any, Dict, List, Optional, Sequence, Tuple

    RUFF_EXE: List[str] = (
        [ruff] if (ruff := which("ruff")) else [sys.executable, "-m", "ruff"]
    )
    DELTA_EXE: Optional[str] = which("delta")

    def run_ruff(args: Sequence[str], **kwargs: Any) -> subprocess.CalledProcessError:
        return subprocess.run([*RUFF_EXE, *args], check=True, **kwargs)

    def input_from_options(options: Dict[str, str]):
        while True:
            print("\nProvide the key corresponding to the desired option:\n")
            for key, option in options.items():
                print(f"[{key}] {option}")
            choice: str = input("\nChoice: ")
            if options.get(choice):
                return choice
            print("Invalid choice.")

    @dataclass
    class RuffViolation:
        code: str
        count: int
        fixable: bool
        name: str
        summary: Optional[str] = None
        explanation: Optional[str] = None

        def __post_init__(self):
            rule_details: Dict[str, Any] = json.loads(
                run_ruff(
                    ["rule", "--output-format=json", self.code],
                    capture_output=True,
                ).stdout,
            )
            self.summary = rule_details.get("summary")
            self.explanation = rule_details.get("explanation")

        @classmethod
        def from_dict(cls, kv: Dict[str, Any], /):
            return cls(**{k: v for k, v in kv.items() if k in cls.__dataclass_fields__})

    def get_fixable_violations(args: Sequence[str]) -> Tuple[RuffViolation, ...]:
        p = run_ruff(
            [
                "check",
                *args,
                "--fixable=ALL",
                "--statistics",
                "--output-format=json",
                "--quiet",
                "--no-fix",
                "--exit-zero",
            ],
            capture_output=True,
        )

        return tuple(
            sorted(
                (
                    RuffViolation.from_dict(rule)
                    for rule in json.loads(p.stdout)
                    if rule.get("fixable")
                ),
                key=lambda x: x.code,
            ),
        )

    def ruff_review(args):
        first_pass: bool = True
        while True:
            fixable_violations: Tuple[RuffViolation, ...] = get_fixable_violations(args)
            if not fixable_violations:
                print("No fixable violations remain.")
                return

            if not first_pass:
                print("Fixable violations remain.")
                options: Dict[str, str] = {
                    "": "Run Again.",
                    "q": "Quit.",
                }

                selection = input_from_options(options)

                if selection == "q":
                    return

            first_pass = False

            for i, rule in enumerate(fixable_violations):
                rule_violations_by_file: Dict[str, int] = defaultdict(int)

                for x in json.loads(
                    run_ruff(
                        [
                            "check",
                            f"--select={rule.code}",
                            f"--fixable={rule.code}",
                            "--quiet",
                            "--no-fix",
                            "--exit-zero",
                            "--output-format=json",
                        ],
                        capture_output=True,
                    ).stdout,
                ):
                    if f := x.get("filename"):
                        rule_violations_by_file[
                            str(Path(f).relative_to(Path.cwd()))
                        ] += 1

                while rule_violations_by_file:
                    while True:
                        file = next(iter(rule_violations_by_file))
                        n_violations: int = rule_violations_by_file[file]
                        p = run_ruff(
                            [
                                "check",
                                f"--select={rule.code}",
                                f"--fixable={rule.code}",
                                "--quiet",
                                "--diff",
                                "--no-fix",
                                "--exit-zero",
                                file,
                            ],
                            capture_output=bool(DELTA_EXE),
                        )
                        if DELTA_EXE:
                            subprocess.run(
                                [DELTA_EXE, "--paging=never"],
                                check=False,
                                input=p.stdout,
                            )

                        file_diff = run_ruff(
                            [
                                "check",
                                f"--select={rule.code}",
                                f"--fixable={rule.code}",
                                "--quiet",
                                "--diff",
                                "--no-fix",
                                "--exit-zero",
                                file,
                            ],
                            capture_output=True,
                        ).stdout

                        print(
                            f"{sum(rule_violations_by_file.values())} total violation(s) of rule [{i + 1}/{len(fixable_violations)}]: [{rule.code}] {rule.summary}"
                        )
                        print()
                        print(f"{n_violations} reported violation(s) in file: {file}")
                        if len(rule_violations_by_file) > 1:
                            print()
                            print(
                                f"This rule is violated in {len(rule_violations_by_file)-1} other file(s)."
                            )

                        options: Dict[str, str] = {
                            "h": f"View full help for rule {rule.code}.",
                            "f": f"Fix {rule.code} violations in this file.",
                            "F": f"Fix {rule.code} violations in all remaining files.",
                            "i": f"Ignore {rule.code} violations in this file.",
                            "I": f"Ignore {rule.code} violations in all remaining files.",
                            "v": "View proposed edits to this file.",
                            "r": "Refresh.",
                            "s": "Skip to next.",
                            "q": "Quit.",
                        }

                        selection = input_from_options(options)

                        if selection == "q":
                            return

                        if selection == "r":
                            continue

                        if selection == "h":
                            subprocess.run(
                                [
                                    os.getenv("EDITOR", "vim"),
                                    "-",
                                    "-c",
                                    "set ft=markdown",
                                ],
                                check=False,
                                input=run_ruff(
                                    ["rule", rule.code],
                                    capture_output=True,
                                ).stdout,
                            )

                            continue

                        if selection == "v":
                            if DELTA_EXE:
                                subprocess.run(
                                    [DELTA_EXE, "--paging=always"],
                                    check=False,
                                    input=file_diff,
                                )
                            continue

                        if selection == "s":
                            pass
                        elif selection == "f":
                            run_ruff(
                                [
                                    "check",
                                    f"--select={rule.code}",
                                    f"--fixable={rule.code}",
                                    "--fix",
                                    file,
                                ],
                            )
                            rule_violations_by_file.pop(file)
                        elif selection == "F":
                            run_ruff(
                                [
                                    "check",
                                    f"--select={rule.code}",
                                    f"--fixable={rule.code}",
                                    "--fix",
                                    *list(rule_violations_by_file),
                                ],
                            )
                            rule_violations_by_file.clear()
                        elif selection == "i":
                            run_ruff(
                                [
                                    "check",
                                    f"--select={rule.code}",
                                    f"--fixable={rule.code}",
                                    "--add-noqa",
                                    file,
                                ],
                            )
                        elif selection == "I":
                            run_ruff(
                                [
                                    "check",
                                    f"--select={rule.code}",
                                    f"--fixable={rule.code}",
                                    "--add-noqa",
                                    *list(rule_violations_by_file),
                                ],
                            )
                            rule_violations_by_file.clear()

                        rule_violations_by_file.pop(file, None)
                        break

            print("\nFin!\n")

    ruff_review(args)


if __name__ == "__main__":
    myke.main(__file__)
