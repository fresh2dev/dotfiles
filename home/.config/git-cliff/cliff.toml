# configuration file for git-cliff
# see https://www.github.com/orhun/git-cliff#configuration-file

[changelog]
# changelog header
header = """
# Changelog\n
"""
# template for the changelog body
# https://tera.netlify.app/docs/#introduction
body = """
{% if version %}\
    ## {{ version | trim_start_matches(pat="v") }} - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.breaking %}*Breaking:* {% endif %}{{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""

# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    # { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://www.github.com/orhun/git-cliff/issues/${2}))"}, # replace issue numbers
]
# regex for parsing and grouping commits
commit_parsers = [
    # skip these
    { message = "^init", skip = true},
    { message = "^docs?\\(?[A-Za-z-_]*\\)?!?:", skip = true},
    { message = "^style\\(?[A-Za-z-_]*\\)?!?:", skip = true},
    { message = "^build\\(?[A-Za-z-_]*\\)?!?:", skip = true},
    { message = "^ci\\(?[A-Za-z-_]*\\)?!?:", skip = true},
    { message = "^test\\(?[A-Za-z-_]*\\)?!?:", skip = true},
    { message = "^[Mm]erge", skip = true},
    # group these
    # https://www.github.com/orhun/git-cliff/issues/9#issuecomment-914521594
    # https://gist.github.com/rxaviers/7360908
    { message = "^feat\\(?[A-Za-z-_]*\\)?!?:", group = "<!-- 0 -->:clap: Features"},
    { message = "^fix\\(?[A-Za-z-_]*\\)?!?:", group = "<!-- 1 -->:fist: Fixes"},
    { message = "^change\\(?[A-Za-z-_]*\\)?!?:", group = "<!-- 2 -->:point_right: Changes"},
    { message = "^remove\\(?[A-Za-z-_]*\\)?!?:", group = "<!-- 2 -->:point_right: Changes"},
    { message = "^refactor\\(?[A-Za-z-_]*\\)?!?:", group = "<!-- 2 -->:point_right: Changes"},
    { message = "^[a-z]+\\(?[A-Za-z-_]*\\)?!?:", group = "<!-- 3 -->:metal: Other"},
    { message = ".*", group = "<!-- 4 -->:shit: Unconventional"},
    #{ message = "^perf", group = "Performance"},
    #{ message = "^refactor", group = "Refactor"},
    #{ message = "^revert", group = "Reverts"},
    # removes, build, ci
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = true
# filter out the commits that are not matched by commit parsers
filter_commits = false
# glob pattern for matching git tags
tag_pattern = "[0-9]*"
# regex for skipping tags
#skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = "[A-Za-z]"
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
# limit the number of commits included in the changelog.
# limit_commits = 42
