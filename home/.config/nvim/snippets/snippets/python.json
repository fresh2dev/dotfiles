{
  "Derived class": {
    "body": [
      "class ${1:classname}($2):",
      "\t${3:pass}"
    ],
    "description": "Class definition with inheritance",
    "prefix": "classd"
  },
  "Function": {
    "body": [
      "def ${1:fname}($2):",
      "\t${3:pass}"
    ],
    "description": "Function definition",
    "prefix": "def"
  },
  "Function w/ return type": {
    "body": [
      "def ${1:fname}($2) -> ${3:None}:",
      "\t${4:pass}"
    ],
    "description": "Function definition with return type",
    "prefix": "deft"
  },
  "Jupyter cell": {
    "body": "# %%",
    "description": "Add a new cell",
    "prefix": "#cell"
  },
  "Jupyter markdown cell": {
    "body": "# %% [markdown]",
    "description": "Add a new markdown cell",
    "prefix": "#mark"
  },
  "Method": {
    "body": [
      "def ${1:mname}(self$2):",
      "\t${3:pass}"
    ],
    "description": "Class method definition",
    "prefix": "defs"
  },
  "Method w/ return type": {
    "body": [
      "def ${1:mname}(self$2) -> ${3:None}:",
      "\t${4:pass}"
    ],
    "description": "Class method definition",
    "prefix": "defst"
  },
  "TypedDict": {
    "body": [
      "from typing import TypedDict",
      "",
      "",
      "class MyTypedDict(TypedDict):",
      "    foo: str",
      "    bar: int"
    ],
    "prefix": "TypedDict"
  },
  "case": {
    "body": [
      "case ${2:pattern}:",
      "\t${3:pass}"
    ],
    "description": "case block",
    "prefix": "case"
  },
  "case wildcard": {
    "body": [
      "case _:",
      "\t${1:pass}"
    ],
    "description": "case wildcard block if other cases fail",
    "prefix": "casew"
  },
  "class": {
    "body": [
      "class ${1:classname}:",
      "\t${2:pass}"
    ],
    "description": "Class definition",
    "prefix": "class"
  },
  "class template": {
    "body": [
      "class ${1:ClassName}($2):",
      "\t\"\"\"${3:docstring for $1.}\"\"\"",
      "\tdef __init__(self, ${4:arg}):",
      "\t\t${5:super($1, self).__init__()}",
      "\t\tself.$4 = $4$0"
    ],
    "description": "Class definition template",
    "prefix": "classi"
  },
  "context-manager methods": {
    "body": [
      "# https://adamj.eu/tech/2021/07/04/python-type-hints-how-to-type-a-context-manager/",
      "def __enter__(self) -> None:",
      "    pass",
      "",
      "@overload",
      "def __exit__(self, exc_type: None, exc_val: None, exc_tb: None) -> None: ...",
      "",
      "@overload",
      "def __exit__(",
      "    self,",
      "    exc_type: type[BaseException],",
      "    exc_val: BaseException,",
      "    exc_tb: TracebackType,",
      ") -> None: ...",
      "",
      "def __exit__(",
      "    self,",
      "    exc_type: type[BaseException] | None,",
      "    exc_val: BaseException | None,",
      "    exc_tb: TracebackType | None,",
      ") -> None:",
      "    pass"
    ],
    "prefix": "context-manager methods"
  },
  "elif": {
    "body": [
      "elif ${1:expression}:",
      "\t${2:pass}"
    ],
    "description": "elif statement",
    "prefix": "elif"
  },
  "else": {
    "body": [
      "else:",
      "\t${1:pass}"
    ],
    "description": "else statement",
    "prefix": "else"
  },
  "except": {
    "body": [
      "except$1:",
      "\t${2:pass}"
    ],
    "description": "except statement",
    "prefix": "except"
  },
  "except as": {
    "body": [
      "except ${1:Exception} as ${2:e}:",
      "\t${3:raise $2}"
    ],
    "description": "'except as' statement",
    "prefix": "exceptas"
  },
  "for": {
    "body": [
      "for ${1:value} in ${2:iterable}:",
      "\t${3:pass}"
    ],
    "description": "for loop",
    "prefix": "for"
  },
  "for w/ range": {
    "body": [
      "for ${1:value} in range($2):",
      "\t${3:pass}"
    ],
    "description": "for loop that iterates over range of integers",
    "prefix": "forr"
  },
  "from ... import ...": {
    "body": "from ${1:pathlib} import ${2:Path}",
    "description": "Import individual objects directly into the callerâ€™s symbol table",
    "prefix": "fromim"
  },
  "if": {
    "body": [
      "if ${1:condition}:",
      "\t${2:pass}"
    ],
    "description": "if statement",
    "prefix": "if"
  },
  "if __name__ == __main__": {
    "body": [
      "if __name__ == \"__main__\":",
      "\t${1:main()}"
    ],
    "description": "Execute code if the file is executed directly",
    "prefix": "ifmain"
  },
  "if/else": {
    "body": [
      "if ${1:condition}:",
      "\t${2:pass}",
      "else:",
      "\t${3:pass}"
    ],
    "description": "if statement with else",
    "prefix": "ifelse"
  },
  "lambda": {
    "body": [
      "lambda ${1:parameter_list}: ${2:expression}"
    ],
    "description": "lambda statement",
    "prefix": "lambda"
  },
  "match/case": {
    "body": [
      "match ${1:expression}:",
      "\tcase ${2:pattern}:",
      "\t\t${3:pass}"
    ],
    "description": "match/case statements",
    "prefix": "match"
  },
  "property template": {
    "body": [
      "@property",
      "def ${1:pname}(self):",
      "\t\"\"\"${2:The $1 property.}\"\"\"",
      "\t${3:return self._$1}",
      "",
      "@${4:$1}.setter",
      "def ${5:$1}(self, value):",
      "\t${6:self._$1} = value"
    ],
    "description": "New property: get and set via decorator",
    "prefix": "property"
  },
  "self": {
    "body": "self.$0",
    "description": "Snippet to reference the self property in an object",
    "prefix": "s"
  },
  "try/except": {
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:Exception} as ${3:e}:",
      "\t${4:raise $3}"
    ],
    "description": "try/except blocks",
    "prefix": "try"
  },
  "try/except/else": {
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:Exception} as ${3:e}:",
      "\t${4:raise $3}",
      "else:",
      "\t${5:pass}"
    ],
    "description": "try/except/else blocks",
    "prefix": "trya"
  },
  "try/except/else/finally": {
    "body": [
      "try:",
      "\t${1:pass}",
      "except${2: ${3:Exception} as ${4:e}}:",
      "\t${5:raise}",
      "else:",
      "\t${6:pass}",
      "finally:",
      "\t${7:pass}"
    ],
    "description": "try/except/else/finally blocks",
    "prefix": "tryef"
  },
  "try/except/finally": {
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:Exception} as ${3:e}:",
      "\t${4:raise $3}",
      "finally:",
      "\t${5:pass}"
    ],
    "description": "try/except/finally blocks",
    "prefix": "tryf"
  },
  "while": {
    "body": [
      "while ${1:condition}:",
      "\t${2:pass}"
    ],
    "description": "while loop",
    "prefix": "while"
  },
  "with": {
    "body": [
      "with ${1:expression} as ${2:target}:",
      "\t${3:pass}"
    ],
    "description": "'with' statement",
    "prefix": "with"
  }
}
